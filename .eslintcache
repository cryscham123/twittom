[{"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\index.js":"1","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\app.jsx":"2","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\router.js":"3","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\fbase.js":"4","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\nav\\nav.jsx":"5","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\auth\\auth.jsx":"6","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\auth\\socialLogin.jsx":"7","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\home\\home.jsx":"8","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\twittform\\twittform.jsx":"9","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\twitts\\twitts.jsx":"10","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\profile\\profile.jsx":"11"},{"size":257,"mtime":1611377524853,"results":"12","hashOfConfig":"13"},{"size":1245,"mtime":1611426667314,"results":"14","hashOfConfig":"13"},{"size":1144,"mtime":1611407063772,"results":"15","hashOfConfig":"13"},{"size":749,"mtime":1611311582880,"results":"16","hashOfConfig":"13"},{"size":498,"mtime":1611402779475,"results":"17","hashOfConfig":"13"},{"size":2674,"mtime":1611382750029,"results":"18","hashOfConfig":"13"},{"size":1001,"mtime":1611393842460,"results":"19","hashOfConfig":"13"},{"size":897,"mtime":1611415647291,"results":"20","hashOfConfig":"13"},{"size":3654,"mtime":1611415335241,"results":"21","hashOfConfig":"13"},{"size":3161,"mtime":1611418943014,"results":"22","hashOfConfig":"13"},{"size":1673,"mtime":1611422165245,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ajpml",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\index.js",[],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\app.jsx",[],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\router.js",["52"],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\fbase.js",[],["53","54"],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\nav\\nav.jsx",[],["55","56"],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\auth\\auth.jsx",["57","58"],"import React, { useState } from 'react';\r\nimport { authService, firebaseInstance } from '../../fbase';\r\nimport \"./auth.scss\";\r\nimport SocialLogin from './socialLogin';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [NewAccount, setNewAccount] = useState(false);\r\n    const onChange = event => {\r\n        const { target: { name, value } } = event;\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        }\r\n        else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (NewAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n        }\r\n        catch(error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n    const toggleAccount = () => setNewAccount(prev => !prev)\r\n    return (\r\n        <div className=\"login\">\r\n            <span className=\"login__title\">Login</span>\r\n            <form className=\"login__Form\" onSubmit={onSubmit}>\r\n                <div className=\"login__Form__email\">\r\n                    <i className=\"fas fa-user login__Form__email__icon\"></i>\r\n                    <input className=\"login__Form__email__input\" name=\"email\" type=\"email\" placeholder=\"email\" onChange={onChange} required value={email} />\r\n                </div>\r\n                <div className=\"login__Form__password\">\r\n                    <i className=\"fas fa-lock login__Form__password__icon\"></i>\r\n                    <input className=\"login__Form__password__input\" name=\"password\" type=\"password\" placeholder=\"password\" onChange={onChange} required value={password} />\r\n                </div>\r\n                {error && <span className=\"login__Form__error\">{error}</span>}\r\n                <input className=\"login__Form__submit\" type=\"submit\" value={NewAccount ? \"Create Account\" : \"Sign in\"} />\r\n            </form>\r\n            <div className=\"login__control\">\r\n                <button className=\"login__control__toggle\" onClick={toggleAccount}>{NewAccount ? \"...You Have Accont?\" : \"...You Have No Accont?\"}</button>\r\n                <button className=\"login__control__find\">...Forgot Password?</button>\r\n            </div>\r\n            <SocialLogin />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\auth\\socialLogin.jsx",["59"],"import React from 'react';\r\nimport { authService, firebaseInstance } from '../../fbase';\r\nimport \"./socialLogin.scss\";\r\n\r\nconst SocialLogin = () => {\r\n    const getAccount = async(event) => {\r\n        let provider;\r\n        const { target: { name } } = event;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    }\r\n    return (\r\n        <div className=\"socialLogin\">\r\n            <button name=\"google\" className=\"socialLogin__google\" onClick={getAccount}>\r\n                <i className=\"fab fa-google\"></i>\r\n            </button>\r\n            <button name=\"github\" className=\"socialLogin__github\" onClick={getAccount}>\r\n                <i className=\"fab fa-github\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SocialLogin;","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\home\\home.jsx",[],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\twittform\\twittform.jsx",["60"],"import React, { useState,useRef } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbServie, storageService } from \"fbase\";\r\nimport \"./twittform.scss\";\r\n\r\nconst Twittform = ({ userobj }) => {\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const [twitt, setTwitt] = useState(\"\");\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userobj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const twittobj = {\r\n            text: twitt,\r\n            createdAt: Date.now(),\r\n            creatorId: userobj.uid,\r\n            creatorName: userobj.displayName,\r\n            creatorPhoto: userobj.photoURL,\r\n            attachmentUrl\r\n        }\r\n        await dbServie.collection(\"twittom\").add(twittobj);\r\n        setTwitt(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    const useInput = (validator) => {\r\n        const error = useRef();\r\n        const onChange = event => {\r\n            const { target: { value } } = event\r\n            let willUpdate = true;\r\n            if (validator && typeof validator === \"function\") {\r\n                willUpdate = validator(value);\r\n            }\r\n            if (willUpdate) {\r\n                setTwitt(value);\r\n                error.current.style.opacity = 0;\r\n            } else {\r\n                error.current.style.opacity = 1;\r\n            }\r\n        }\r\n        return { onChange, error };\r\n    }\r\n    const onFileChange = event => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(theFile);\r\n        reader.onloadend = finishedEvent => {\r\n            const { currentTarget: { result } } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n    }\r\n    const onclearAttachment = () => setAttachment(\"\");\r\n    const maxLen = (value) => value.length <= 120;\r\n    const ulala = useInput(maxLen);\r\n    return (\r\n        <form className=\"twittForm\" onSubmit={onSubmit}>\r\n            {attachment &&\r\n                <div className=\"twittForm__preview\">\r\n                    <button className=\"twittForm__preview__cancle\" onClick={onclearAttachment}>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                    <img className=\"twittForm__preview__img\" src={attachment} />\r\n                </div>\r\n            }\r\n            <label for=\"fileForm\" className=\"twittForm__file\"><i className=\"fas fa-paperclip\"></i></label>\r\n            <input id=\"fileForm\" style={{display:\"none\"}} type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <div className=\"twittForm__message\">\r\n                <input\r\n                    className=\"twittForm__message__text\"\r\n                    type=\"text\"\r\n                    placeholder=\"Less than 120 texts...\"\r\n                    maxLength={120}\r\n                    onChange={ulala.onChange}\r\n                    value={twitt}\r\n                />\r\n                <button\r\n                    className=\"twittForm__message__submit\"\r\n                    type=\"submit\"\r\n                    value=\"twitt\"\r\n                >\r\n                    <i className=\"fas fa-paper-plane\"></i>\r\n                </button>\r\n            </div>\r\n            <span className=\"twittForm__error\" ref={ulala.error}>Less Than 120 Texts Please...</span>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Twittform;","C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\components\\twitts\\twitts.jsx",["61","62","63"],"C:\\Users\\user\\Documents\\projects\\react-basic\\twittom\\src\\routes\\profile\\profile.jsx",["64","65","66"],"import React, { useEffect,useState } from 'react';\r\nimport { authService, dbServie } from \"../../fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./profile.scss\";\r\n\r\nconst Profile = ({refreshUser,userobj}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userobj.displayName);\r\n    const getMyTwitts = async() => {\r\n        const twitts = await dbServie.collection(\"twittom\").where(\"creatorId\", \"==\", userobj.uid).orderBy(\"createdAt\").get();\r\n    }\r\n    useEffect(() => getMyTwitts(),[])\r\n    const signOut = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if (userobj.displayName !== newDisplayName) {\r\n            await userobj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    const onChange = event => {\r\n        const { target: { value } } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__state\">\r\n                <img className=\"profile__state__img\" src={userobj.photoURL} />\r\n                <p className=\"profile__state__text\">Hi, {userobj.displayName}</p>\r\n            </div>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" onChange={onChange} value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update profile\" />\r\n            </form>\r\n            <button className=\"profile__logout\" onClick={signOut}>sign out</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;",{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"67","severity":1,"message":"77","line":2,"column":23,"nodeType":"69","messageId":"70","endLine":2,"endColumn":39},{"ruleId":"67","severity":1,"message":"78","line":30,"column":17,"nodeType":"69","messageId":"70","endLine":30,"endColumn":21},{"ruleId":"67","severity":1,"message":"78","line":14,"column":15,"nodeType":"69","messageId":"70","endLine":14,"endColumn":19},{"ruleId":"79","severity":1,"message":"80","line":66,"column":21,"nodeType":"81","endLine":66,"endColumn":81},{"ruleId":"79","severity":1,"message":"80","line":30,"column":17,"nodeType":"81","endLine":30,"endColumn":80},{"ruleId":"82","severity":1,"message":"83","line":32,"column":34,"nodeType":"84","messageId":"85","endLine":32,"endColumn":36},{"ruleId":"79","severity":1,"message":"80","line":46,"column":37,"nodeType":"81","endLine":46,"endColumn":120},{"ruleId":"67","severity":1,"message":"86","line":10,"column":15,"nodeType":"69","messageId":"70","endLine":10,"endColumn":21},{"ruleId":"87","severity":1,"message":"88","line":12,"column":35,"nodeType":"89","endLine":12,"endColumn":37,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"80","line":33,"column":17,"nodeType":"81","endLine":33,"endColumn":79},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["91"],"no-negated-in-lhs",["92"],["91"],["92"],"'firebaseInstance' is defined but never used.","'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'twitts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyTwitts'. Either include it or remove the dependency array.","ArrayExpression",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [getMyTwitts]",{"range":"96","text":"97"},[549,551],"[getMyTwitts]"]