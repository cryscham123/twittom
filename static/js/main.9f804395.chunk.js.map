{"version":3,"sources":["fbase.js","routes/auth/socialLogin.jsx","routes/auth/auth.jsx","components/twitts/twitts.jsx","components/twittform/twittform.jsx","routes/home/home.jsx","components/nav/nav.jsx","routes/profile/profile.jsx","components/router.js","components/app.jsx","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbServie","firestore","storageService","storage","SocialLogin","getAccount","event","a","name","target","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","className","onClick","Auth","useState","email","setEmail","password","setPassword","error","setError","NewAccount","setNewAccount","onChange","value","onSubmit","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","prev","Twitts","twitt","userobj","editting","setEditting","text","newTwitt","setNewTwitt","onModify","doc","id","update","onDelete","window","confirm","delete","refFromURL","attachmentUrl","src","creatorPhoto","creatorName","creatorId","uid","width","height","Twittform","attachment","setAttachment","setTwitt","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","twittobj","createdAt","Date","now","displayName","photoURL","collection","add","ulala","validator","useRef","willUpdate","current","style","opacity","useInput","length","for","display","accept","theFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","result","currentTarget","maxLength","Home","twitts","setTwitts","useEffect","onSnapshot","snapshot","twittArray","docs","map","data","Nav","exact","to","activeStyle","color","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyTwitts","where","orderBy","get","updateProfile","signOut","push","Approuter","isLoggedIn","path","App","init","setInit","setIsLoggedIn","setUserobj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f804395.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDERID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbServie = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React from 'react';\r\nimport { authService, firebaseInstance } from '../../fbase';\r\nimport \"./socialLogin.scss\";\r\n\r\nconst SocialLogin = () => {\r\n    const getAccount = async(event) => {\r\n        let provider;\r\n        const { target: { name } } = event;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    }\r\n    return (\r\n        <div className=\"socialLogin\">\r\n            <button name=\"google\" className=\"socialLogin__google\" onClick={getAccount}>\r\n                <i className=\"fab fa-google\"></i>\r\n            </button>\r\n            <button name=\"github\" className=\"socialLogin__github\" onClick={getAccount}>\r\n                <i className=\"fab fa-github\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SocialLogin;","import React, { useState } from 'react';\r\nimport { authService, firebaseInstance } from '../../fbase';\r\nimport \"./auth.scss\";\r\nimport SocialLogin from './socialLogin';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [NewAccount, setNewAccount] = useState(false);\r\n    const onChange = event => {\r\n        const { target: { name, value } } = event;\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        }\r\n        else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (NewAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n        }\r\n        catch(error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n    const toggleAccount = () => setNewAccount(prev => !prev)\r\n    return (\r\n        <div className=\"login\">\r\n            <span className=\"login__title\">Login</span>\r\n            <form className=\"login__Form\" onSubmit={onSubmit}>\r\n                <div className=\"login__Form__email\">\r\n                    <i className=\"fas fa-user login__Form__email__icon\"></i>\r\n                    <input className=\"login__Form__email__input\" name=\"email\" type=\"email\" placeholder=\"email\" onChange={onChange} required value={email} />\r\n                </div>\r\n                <div className=\"login__Form__password\">\r\n                    <i className=\"fas fa-lock login__Form__password__icon\"></i>\r\n                    <input className=\"login__Form__password__input\" name=\"password\" type=\"password\" placeholder=\"password\" onChange={onChange} required value={password} />\r\n                </div>\r\n                {error && <span className=\"login__Form__error\">{error}</span>}\r\n                <input className=\"login__Form__submit\" type=\"submit\" value={NewAccount ? \"Create Account\" : \"Sign in\"} />\r\n            </form>\r\n            <div className=\"login__control\">\r\n                <button className=\"login__control__toggle\" onClick={toggleAccount}>{NewAccount ? \"...You Have Accont?\" : \"...You Have No Accont?\"}</button>\r\n                <button className=\"login__control__find\">...Forgot Password?</button>\r\n            </div>\r\n            <SocialLogin />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React,{useState} from 'react';\r\nimport { dbServie, storageService } from '../../fbase';\r\nimport \"./twitts.scss\";\r\n\r\nconst Twitts = ({ twitt, userobj }) => {\r\n    const [editting, setEditting] = useState(false);\r\n    const [newTwitt, setNewTwitt] = useState(twitt.text);\r\n    const getEdit = event => {\r\n        const { target: { value } } = event;\r\n        setNewTwitt(value);\r\n    }\r\n    const onModify = async(event) => {\r\n        event.preventDefault();\r\n        await dbServie.doc(`twittom/${twitt.id}`).update({\r\n            text: newTwitt\r\n        });\r\n        setEditting(false);\r\n    }\r\n    const onDelete = async() => {\r\n        const ok = window.confirm(\"are you sure to delet?\");\r\n        if (ok) {\r\n            await dbServie.doc(`twittom/${twitt.id}`).delete();\r\n            await storageService.refFromURL(twitt.attachmentUrl).delete();\r\n        }\r\n    }\r\n    const toggleEditting = () => setEditting(prev => !prev);\r\n    return (\r\n        <li className=\"twitt\">\r\n            <div className=\"twitt__profile\">\r\n                <img className=\"twitt__profile__img\" src={twitt.creatorPhoto}/>\r\n                <p className=\"twitt__profile__name\">{twitt.creatorName}</p>\r\n                {twitt.creatorId == userobj.uid &&\r\n                            <div className=\"twitt__profile__control\">\r\n                                <button className=\"twitt__profile__control__edit\" onClick={toggleEditting}>\r\n                                    <i className=\"fas fa-edit\"></i>\r\n                                </button>\r\n                                <button className=\"twitt__profile__control__delete\" onClick={onDelete}>\r\n                                    <i className=\"fas fa-trash-alt\"></i>\r\n                                </button>\r\n                            </div>\r\n                }\r\n            </div>\r\n            <div className=\"twitt__twitt\">\r\n                <span className=\"twitt__twitt__text\">{twitt.text}</span>\r\n            </div>\r\n            {twitt.attachmentUrl && <img className=\"twitt__img\" src={twitt.attachmentUrl} width=\"50px\" height=\"50px\" />}\r\n            <div className=\"twitt__btn\">\r\n                <button className=\"twitt__btn__good\">\r\n                    <i className=\"fas fa-thumbs-up\"></i>\r\n                </button>\r\n                <button className=\"twitt__btn__bad\">\r\n                    <i className=\"fas fa-thumbs-down\"></i>\r\n                </button>\r\n                <button className=\"twitt__btn__comment\">\r\n                    <i className=\"fas fa-comment-alt\"></i>\r\n                </button>\r\n            </div>\r\n                    {\r\n                        editting ?\r\n                    <form className=\"twitt__editForm\" onSubmit={onModify}>\r\n                        <input className=\"twitt__editForm__text\" type=\"text\" placeholder=\"Less than 120 texts...\" onChange={getEdit} value={newTwitt} required></input>\r\n                        <input className=\"twitt__editForm__submit\" type=\"submit\" value=\"Edit\"></input>\r\n                    </form>\r\n                    :\r\n                    <>\r\n                    </>\r\n                    }\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Twitts;","import React, { useState,useRef } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbServie, storageService } from \"fbase\";\r\nimport \"./twittform.scss\";\r\n\r\nconst Twittform = ({ userobj }) => {\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const [twitt, setTwitt] = useState(\"\");\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userobj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const twittobj = {\r\n            text: twitt,\r\n            createdAt: Date.now(),\r\n            creatorId: userobj.uid,\r\n            creatorName: userobj.displayName,\r\n            creatorPhoto: userobj.photoURL,\r\n            attachmentUrl\r\n        }\r\n        await dbServie.collection(\"twittom\").add(twittobj);\r\n        setTwitt(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    const useInput = (validator) => {\r\n        const error = useRef();\r\n        const onChange = event => {\r\n            const { target: { value } } = event\r\n            let willUpdate = true;\r\n            if (validator && typeof validator === \"function\") {\r\n                willUpdate = validator(value);\r\n            }\r\n            if (willUpdate) {\r\n                setTwitt(value);\r\n                error.current.style.opacity = 0;\r\n            } else {\r\n                error.current.style.opacity = 1;\r\n            }\r\n        }\r\n        return { onChange, error };\r\n    }\r\n    const onFileChange = event => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(theFile);\r\n        reader.onloadend = finishedEvent => {\r\n            const { currentTarget: { result } } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n    }\r\n    const onclearAttachment = () => setAttachment(\"\");\r\n    const maxLen = (value) => value.length <= 120;\r\n    const ulala = useInput(maxLen);\r\n    return (\r\n        <form className=\"twittForm\" onSubmit={onSubmit}>\r\n            {attachment &&\r\n                <div className=\"twittForm__preview\">\r\n                    <button className=\"twittForm__preview__cancle\" onClick={onclearAttachment}>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                    <img className=\"twittForm__preview__img\" src={attachment} />\r\n                </div>\r\n            }\r\n            <label for=\"fileForm\" className=\"twittForm__file\"><i className=\"fas fa-paperclip\"></i></label>\r\n            <input id=\"fileForm\" style={{display:\"none\"}} type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <div className=\"twittForm__message\">\r\n                <input\r\n                    className=\"twittForm__message__text\"\r\n                    type=\"text\"\r\n                    placeholder=\"Less than 120 texts...\"\r\n                    maxLength={120}\r\n                    onChange={ulala.onChange}\r\n                    value={twitt}\r\n                />\r\n                <button\r\n                    className=\"twittForm__message__submit\"\r\n                    type=\"submit\"\r\n                    value=\"twitt\"\r\n                >\r\n                    <i className=\"fas fa-paper-plane\"></i>\r\n                </button>\r\n            </div>\r\n            <span className=\"twittForm__error\" ref={ulala.error}>Less Than 120 Texts Please...</span>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Twittform;","import React, { useEffect, useState } from 'react';\r\nimport Twitts from '../../components/twitts/twitts';\r\nimport { dbServie } from '../../fbase';\r\n\r\nimport \"./home.scss\";\r\nimport Twittform from 'components/twittform/twittform';\r\n\r\nconst Home = ({userobj}) => {\r\n    const [twitts, setTwitts] = useState([]);\r\n    useEffect(() => {\r\n        dbServie.collection(\"twittom\").onSnapshot((snapshot) => {\r\n            const twittArray = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }))\r\n            setTwitts(twittArray);\r\n        })\r\n    }, []);\r\n    return (\r\n        <div className=\"homeGrid\">\r\n            <ul className=\"twitts\">\r\n                {twitts.map(twitt => <Twitts key={twitt.id} twitt={twitt} userobj={userobj} />)}\r\n            </ul>\r\n            <Twittform userobj={userobj} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./nav.scss\";\r\n\r\nconst Nav = ({ userobj }) => {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <NavLink exact className=\"nav__nav\" to=\"/\" activeStyle={{\r\n                color: \"#1b9cfc\"\r\n            }}>Home</NavLink>\r\n            <NavLink className=\"nav__nav\" to=\"/profile\" activeStyle={{\r\n                color: \"#1b9cfc\"\r\n            }}>Profile</NavLink>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Nav;","import React, { useEffect,useState } from 'react';\r\nimport { authService, dbServie } from \"../../fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./profile.scss\";\r\n\r\nconst Profile = ({refreshUser,userobj}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userobj.displayName);\r\n    const getMyTwitts = async() => {\r\n        const twitts = await dbServie.collection(\"twittom\").where(\"creatorId\", \"==\", userobj.uid).orderBy(\"createdAt\").get();\r\n    }\r\n    useEffect(() => getMyTwitts(),[])\r\n    const signOut = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if (userobj.displayName !== newDisplayName) {\r\n            await userobj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    const onChange = event => {\r\n        const { target: { value } } = event;\r\n        setNewDisplayName(value);\r\n    }\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__state\">\r\n                <img className=\"profile__state__img\" src={userobj.photoURL} />\r\n                <p className=\"profile__state__text\">Hi, {userobj.displayName}</p>\r\n            </div>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" onChange={onChange} value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update profile\" />\r\n            </form>\r\n            <button className=\"profile__logout\" onClick={signOut}>sign out</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from '../routes/auth/auth';\r\nimport Home from '../routes/home/home';\r\nimport Nav from \"./nav/nav\";\r\nimport Profile from \"../routes/profile/profile\";\r\n\r\nconst Approuter = ({refreshUser,isLoggedIn,userobj}) => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Nav userobj={userobj} />\r\n                        <Route exact path=\"/\">\r\n                            <Home userobj={userobj} />\r\n                        </Route>\r\n                        <Route path=\"/profile\">\r\n                            <Profile refreshUser={refreshUser} userobj={userobj} />\r\n                        </Route>\r\n                    </>\r\n                     ) : (\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                    )\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default Approuter;","import React, { useEffect, useState } from 'react';\nimport Approuter from \"./router\";\nimport {authService} from \"../fbase\"\nimport \"./app.scss\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userobj, setUserobj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserobj({\n          displayName: user.displayName || \"Visitor\",\n          uid: user.uid,\n          photoURL: user.photoURL || \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6affXwdu79nsCKnaRYrbRuY8DKGw52nOaXw&usqp=CAU\",\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserobj({\n      displayName: user.displayName,\n      uid: user.uid,\n      photoURL: user.photoURL ,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n      {init ? <Approuter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userobj={userobj} /> : \"initializing...\"}\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}