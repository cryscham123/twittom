{"version":3,"sources":["fbase.js","routes/auth/socialLogin.jsx","routes/auth/auth.jsx","components/twitts/twitts.jsx","components/twittform/twittform.jsx","routes/home/home.jsx","components/nav/nav.jsx","routes/profile/profile.jsx","components/router.js","components/app.jsx","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbServie","firestore","storageService","storage","SocialLogin","getAccount","event","a","name","target","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","className","onClick","Auth","useState","email","setEmail","password","setPassword","error","setError","NewAccount","setNewAccount","loginErrorRef","useRef","onChange","current","style","opacity","value","onSubmit","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","ref","type","placeholder","required","prev","Date","getFullYear","Twitts","errorMessage","validator","twitt","userobj","editting","setEditting","text","newTwitt","setNewTwitt","Merror","setMerror","MerrorRef","onModify","doc","id","update","heheh","length","getEdit","willUpdate","onDelete","window","confirm","delete","refFromURL","attachmentUrl","src","creatorPhoto","alt","uid","creatorName","displayDate","creatorId","createdAt","Twittform","errorRef","attachment","setAttachment","setTwitt","attachmentRef","child","uuidv4","putString","response","getDownloadURL","twittobj","toLocaleDateString","now","displayName","photoURL","collection","add","scroll","bottom","behavior","ulala","htmlFor","display","accept","theFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","result","currentTarget","maxLength","Home","twitts","setTwitts","useEffect","orderBy","onSnapshot","snapshot","twittArray","docs","map","data","Nav","exact","to","activeStyle","color","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyTwitts","where","get","updateProfile","signOut","push","Approuter","isLoggedIn","path","App","init","setInit","setIsLoggedIn","setUserobj","onAuthStateChanged","user","slice","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5ac54f2.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDERID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbServie = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React from 'react';\r\nimport { authService, firebaseInstance } from '../../fbase';\r\nimport \"./socialLogin.scss\";\r\n\r\nconst SocialLogin = () => {\r\n    const getAccount = async(event) => {\r\n        let provider;\r\n        const { target: { name } } = event;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    }\r\n    return (\r\n        <div className=\"socialLogin\">\r\n            <button name=\"google\" className=\"socialLogin__google\" onClick={getAccount}>\r\n                <i className=\"fab fa-google\"></i>\r\n            </button>\r\n            <button name=\"github\" className=\"socialLogin__github\" onClick={getAccount}>\r\n                <i className=\"fab fa-github\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SocialLogin;","import React, { useRef, useState } from 'react';\r\nimport { authService } from '../../fbase';\r\nimport \"./auth.scss\";\r\nimport SocialLogin from './socialLogin';\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [NewAccount, setNewAccount] = useState(false);\r\n    const loginErrorRef = useRef();\r\n    const onChange = event => {\r\n        loginErrorRef.current.style.opacity = \"0\";\r\n        const { target: { name, value } } = event;\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        }\r\n        else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if (NewAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n        }\r\n        catch(error) {\r\n            setError(error.message);\r\n            loginErrorRef.current.style.opacity = \"1\";\r\n        }\r\n    }\r\n    const toggleAccount = () => setNewAccount(prev => !prev)\r\n    return (\r\n        <div className=\"auth\">\r\n            <span className=\"welcome\">Welcome!</span>\r\n            <div className=\"login\">\r\n                <span className=\"login__title\">Login</span>\r\n                <span ref={loginErrorRef}className=\"login__error\">{error}</span>\r\n                <form className=\"login__Form\" onSubmit={onSubmit}>\r\n                    <div className=\"login__Form__email\">\r\n                        <i className=\"fas fa-user login__Form__email__icon\"></i>\r\n                        <input className=\"login__Form__email__input\" name=\"email\" type=\"email\" placeholder=\"email\" onChange={onChange} required value={email} />\r\n                    </div>\r\n                    <div className=\"login__Form__password\">\r\n                        <i className=\"fas fa-lock login__Form__password__icon\"></i>\r\n                        <input className=\"login__Form__password__input\" name=\"password\" type=\"password\" placeholder=\"password\" onChange={onChange} required value={password} />\r\n                    </div>\r\n                    <input className=\"login__Form__submit\" type=\"submit\" value={NewAccount ? \"Create Account\" : \"Sign in\"} />\r\n                </form>\r\n                <div className=\"login__control\">\r\n                    <button className=\"login__control__toggle\" onClick={toggleAccount}>{NewAccount ? \"...You Have Accont?\" : \"...You Have No Accont?\"}</button>\r\n                    <button className=\"login__control__find\">...Forgot Password?</button>\r\n                </div>\r\n                <SocialLogin />\r\n                <span className=\"creator\">&copy; TWITTOM.{new Date().getFullYear()} 김형훈</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import React,{useState,useRef} from 'react';\r\nimport { dbServie, storageService } from '../../fbase';\r\nimport \"./twitts.scss\";\r\n\r\nconst Twitts = ({ twitt, userobj }) => {\r\n    const [editting, setEditting] = useState(false);\r\n    const [newTwitt, setNewTwitt] = useState(twitt.text);\r\n    const [Merror, setMerror] = useState(\"\");\r\n    const MerrorRef = useRef();\r\n    const onModify = async(event) => {\r\n        event.preventDefault();\r\n        await dbServie.doc(`twittom/${twitt.id}`).update({\r\n            text: newTwitt\r\n        });\r\n        setEditting(false);\r\n    }\r\n    const useInput = (errorMessage, validator) => {\r\n        const getEdit = event => {\r\n            const { target: { value } } = event\r\n            let willUpdate = true;\r\n            if (validator && typeof validator === \"function\") {\r\n                willUpdate = validator(value);\r\n            }\r\n            if (willUpdate) {\r\n                setNewTwitt(value);\r\n                MerrorRef.current.style.opacity = 0;\r\n            } else {\r\n                setMerror(errorMessage);\r\n                MerrorRef.current.style.opacity = 1;\r\n            }\r\n        }\r\n        return { getEdit };\r\n    }\r\n    const maxLen = (value) => value.length <= 100;\r\n    const heheh = useInput(\"Less Than 100 Texts Please...\",maxLen)\r\n    const onDelete = async() => {\r\n        const ok = window.confirm(\"Are you sure to delete?\");\r\n        if (ok) {\r\n            await dbServie.doc(`twittom/${twitt.id}`).delete();\r\n            await storageService.refFromURL(twitt.attachmentUrl).delete();\r\n        }\r\n    }\r\n    const toggleEditting = () => setEditting(prev => !prev);\r\n    return (\r\n        <li className=\"twitt\">\r\n            <div className=\"twitt__profile\">\r\n                <img className=\"twitt__profile__img\" src={twitt.creatorPhoto} alt={userobj.uid} />\r\n                <p className=\"twitt__profile__name\">{twitt.creatorName}</p>\r\n                <p className=\"twitt__profile__time\">{twitt.displayDate}</p>\r\n                {twitt.creatorId === userobj.uid &&\r\n                            <div className=\"twitt__profile__control\">\r\n                                <button className=\"twitt__profile__control__edit\" onClick={toggleEditting}>\r\n                                    <i className=\"fas fa-edit\"></i>\r\n                                </button>\r\n                                <button className=\"twitt__profile__control__delete\" onClick={onDelete}>\r\n                                    <i className=\"fas fa-trash-alt\"></i>\r\n                                </button>\r\n                            </div>\r\n                }\r\n            </div>\r\n            <div className=\"twitt__twitt\">\r\n                <span className=\"twitt__twitt__text\">{twitt.text}</span>\r\n            </div>\r\n            {twitt.attachmentUrl && <img className=\"twitt__img\" src={twitt.attachmentUrl} alt={twitt.createdAt} />}\r\n            <div className=\"twitt__btn\">\r\n                {editting ?\r\n                    <div className=\"modify\">\r\n                        <form className=\"twitt__editForm\" onSubmit={onModify}>\r\n                            <input\r\n                                className=\"twitt__editForm__text\"\r\n                                type=\"text\"\r\n                                placeholder=\"Less than 100 texts...\"\r\n                                onChange={heheh.getEdit}\r\n                                value={newTwitt}\r\n                                required></input>\r\n                            <button className=\"twitt__editForm__submit\" type=\"submit\">\r\n                                <i className=\"fas fa-edit\"></i>\r\n                            </button>\r\n                        </form>\r\n                        <span className=\"Merror\" ref={MerrorRef}>{Merror}</span>\r\n                    </div>\r\n                    :<></>}\r\n                <button className=\"twitt__btn__good\">\r\n                    <i className=\"fas fa-thumbs-up\"></i>\r\n                </button>\r\n                <button className=\"twitt__btn__bad\">\r\n                    <i className=\"fas fa-thumbs-down\"></i>\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Twitts;","import React, { useState,useRef } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbServie, storageService } from \"fbase\";\r\nimport \"./twittform.scss\";\r\n\r\nconst Twittform = ({ userobj }) => {\r\n    const errorRef = useRef();\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const [twitt, setTwitt] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if (twitt === \"\") {\r\n            setError(\"At Least 1 Letter...\");\r\n            errorRef.current.style.opacity = 1;\r\n            return;\r\n        }\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userobj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const twittobj = {\r\n            text: twitt,\r\n            displayDate: new Date().toLocaleDateString(),\r\n            createdAt: Date.now(),\r\n            creatorId: userobj.uid,\r\n            creatorName: userobj.displayName,\r\n            creatorPhoto: userobj.photoURL,\r\n            attachmentUrl\r\n        }\r\n        await dbServie.collection(\"twittom\").add(twittobj);\r\n        setTwitt(\"\");\r\n        setAttachment(\"\");\r\n        window.scroll({bottom:0,behavior:\"smooth\"});\r\n    }\r\n    const useInput = (errorMessage,validator) => {\r\n        const onChange = event => {\r\n            const { target: { value } } = event\r\n            let willUpdate = true;\r\n            if (validator && typeof validator === \"function\") {\r\n                willUpdate = validator(value);\r\n            }\r\n            if (willUpdate) {\r\n                setTwitt(value);\r\n                errorRef.current.style.opacity = 0;\r\n            } else {\r\n                setError(errorMessage);\r\n                errorRef.current.style.opacity = 1;\r\n            }\r\n        }\r\n        return { onChange };\r\n    }\r\n    const onFileChange = event => {\r\n        const { target: { files } } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(theFile);\r\n        reader.onloadend = finishedEvent => {\r\n            const { currentTarget: { result } } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n    }\r\n    const onclearAttachment = () => setAttachment(\"\");\r\n    const maxLen = (value) => value.length <= 100;\r\n    const ulala = useInput(\"Less Than 100 Texts Please...\",maxLen);\r\n    return (\r\n        <form className=\"twittForm\" onSubmit={onSubmit}>\r\n            {attachment &&\r\n                <div className=\"twittForm__preview\">\r\n                    <button className=\"twittForm__preview__cancle\" onClick={onclearAttachment}>\r\n                        <i className=\"fas fa-times\"></i>\r\n                    </button>\r\n                <img className=\"twittForm__preview__img\" src={attachment} alt={userobj.uid}/>\r\n                </div>\r\n            }\r\n            <label htmlFor=\"fileForm\" className=\"twittForm__file\"><i className=\"fas fa-paperclip\"></i></label>\r\n            <input id=\"fileForm\" style={{display:\"none\"}} type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n            <div className=\"twittForm__message\">\r\n                <input\r\n                    className=\"twittForm__message__text\"\r\n                    type=\"text\"\r\n                    placeholder=\"Less than 100 texts...\"\r\n                    maxLength={120}\r\n                    onChange={ulala.onChange}\r\n                    value={twitt}\r\n                />\r\n                <button\r\n                    className=\"twittForm__message__submit\"\r\n                    type=\"submit\"\r\n                    value=\"twitt\"\r\n                >\r\n                    <i className=\"fas fa-paper-plane\"></i>\r\n                </button>\r\n            </div>\r\n            <span className=\"twittForm__error\" ref={errorRef}>{error}</span>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Twittform;","import React, { useEffect, useState } from 'react';\r\nimport Twitts from '../../components/twitts/twitts';\r\nimport { dbServie } from '../../fbase';\r\n\r\nimport \"./home.scss\";\r\nimport Twittform from 'components/twittform/twittform';\r\n\r\nconst Home = ({ userobj }) => {\r\n    const [twitts, setTwitts] = useState([]);\r\n    useEffect(() => {\r\n        dbServie.collection(\"twittom\").orderBy(\"createdAt\").onSnapshot((snapshot) => {\r\n            const twittArray = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }))\r\n            setTwitts(twittArray);\r\n        })\r\n    }, []);\r\n    return (\r\n        <div className=\"homeGrid\">\r\n            <ul className=\"twitts\">\r\n                {twitts.map(twitt => <Twitts key={twitt.id} twitt={twitt} userobj={userobj} />)}\r\n            </ul>\r\n            <Twittform userobj={userobj} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./nav.scss\";\r\n\r\nconst Nav = ({ userobj }) => {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <NavLink exact className=\"nav__nav\" to=\"/\" activeStyle={{\r\n                color: \"#1b9cfc\"\r\n            }}>Home</NavLink>\r\n            <NavLink className=\"nav__nav\" to=\"/profile\" activeStyle={{\r\n                color: \"#1b9cfc\"\r\n            }}>Profile</NavLink>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Nav;","import React, { useEffect,useState } from 'react';\r\nimport { authService, dbServie } from \"../../fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./profile.scss\";\r\n\r\nconst Profile = ({refreshUser,userobj}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userobj.displayName);\r\n    const getMyTwitts = async() => {\r\n        const twitts = await dbServie.collection(\"twittom\").where(\"creatorId\", \"==\", userobj.uid).orderBy(\"createdAt\").get();\r\n    }\r\n    useEffect(() => getMyTwitts,[])\r\n    const signOut = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if (userobj.displayName !== newDisplayName) {\r\n            await userobj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    const onChange = event => {\r\n        const { target: { value } } = event;\r\n        if (value.length > 11) {\r\n            return;\r\n        }\r\n        setNewDisplayName(value);\r\n    }\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"profile__state\">\r\n                <img className=\"profile__state__img\" src={userobj.photoURL} alt={userobj.uid}/>\r\n                <p className=\"profile__state__text\">{userobj.displayName}</p>\r\n                <form className=\"profile__updateProfile\" onSubmit={onSubmit}>\r\n                    <input className=\"profile__updateProfile__input\" placeholder=\"Less than 11 letters...\"type=\"text\" onChange={onChange} value={newDisplayName} />\r\n                    <button className=\"profile__updateProfile__submit\" type=\"submit\" value=\"Update profile\">\r\n                        <i className=\"fas fa-edit\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            <button className=\"profile__logout\" onClick={signOut}>sign out</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from '../routes/auth/auth';\r\nimport Home from '../routes/home/home';\r\nimport Nav from \"./nav/nav\";\r\nimport Profile from \"../routes/profile/profile\";\r\n\r\nconst Approuter = ({refreshUser,isLoggedIn,userobj}) => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Nav userobj={userobj} />\r\n                        <Route exact path=\"/\">\r\n                            <Home userobj={userobj} />\r\n                        </Route>\r\n                        <Route path=\"/profile\">\r\n                            <Profile refreshUser={refreshUser} userobj={userobj} />\r\n                        </Route>\r\n                    </>\r\n                     ) : (\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                    )\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default Approuter;","import React, { useEffect, useState } from 'react';\nimport Approuter from \"./router\";\nimport {authService} from \"../fbase\"\nimport \"./app.scss\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userobj, setUserobj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserobj({\n          displayName: user.displayName || `Visitor.${user.uid.slice(0,3)}`,\n          uid: user.uid,\n          photoURL: user.photoURL || \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6affXwdu79nsCKnaRYrbRuY8DKGw52nOaXw&usqp=CAU\",\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserobj({\n      ...userobj,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n      {init ? <Approuter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userobj={userobj} /> : \"initializing...\"}\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}